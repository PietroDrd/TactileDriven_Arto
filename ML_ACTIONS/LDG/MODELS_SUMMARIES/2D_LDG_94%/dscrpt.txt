def build_MultiBranchModel(input_shape1, input_shape2, input_shape3, input_shape4, num_classes):
    # Branch 1
    input1 = Input(shape=input_shape1, name='input1')
    x1 = Conv2D(64, kernel_size=(20, 20), strides=(10,10), activation='relu', padding='same')(input1)
    x1 = MaxPooling2D(pool_size=(2, 2))(x1)
    x1 = Conv2D(128, kernel_size=(2, 2), activation='relu', padding='same')(x1)
    x1 = GlobalMaxPooling2D()(x1)
    
    # Branch 2
    input2 = Input(shape=input_shape2, name='input2')
    x2 = Conv2D(64, kernel_size=(20, 20), strides=(10,10), activation='relu', padding='same')(input2)
    x2 = MaxPooling2D(pool_size=(2, 2))(x2)
    x2 = Conv2D(128, kernel_size=(4, 4), strides=(2,2), activation='relu', padding='same')(x2)
    #x2 = MaxPooling2D(pool_size=(2, 2))(x2)
    x2 = Conv2D(128, kernel_size=(2, 2), activation='relu', padding='same')(x2)
    x2 = GlobalMaxPooling2D()(x2)
    
    # Branch 3
    input3 = Input(shape=input_shape3, name='input3')
    x3 = Conv2D(64, kernel_size=(20, 20), strides=(10,10), activation='relu', padding='same')(input3)
    x3 = MaxPooling2D(pool_size=(2, 2))(x3)
    x3 = Conv2D(128, kernel_size=(2, 2), activation='relu', padding='same')(x3)
    x3 = GlobalMaxPooling2D()(x3)
    
    # Branch 4
    input4 = Input(shape=input_shape4, name='input4')
    x4 = Conv2D(64, kernel_size=(40, 40), strides=(10,10), activation='relu', padding='same')(input4)
    #x4 = MaxPooling2D(pool_size=(2, 2))(x4)
    x4 = Conv2D(128, kernel_size=(4, 4), strides=(2,2), activation='relu', padding='same')(x4)
    x4 = Conv2D(128, kernel_size=(2, 2), activation='relu', padding='same')(x4)
    x4 = GlobalMaxPooling2D()(x4)
    
    # Concatenate branches
    merged = Concatenate()([x1, x2, x3, x4])
    
    # Dense layers for classification
    dense = Dense(128, activation='relu')(merged)
    dense = Dropout(0.1)(dense)
    dense = Dense(64, activation='relu')(dense)
    output = Dense(OUT_N, activation='softmax')(dense)
    
    # Create model
    model = Model(inputs=[input1, input2, input3, input4], outputs=output)
    
    return model

Model: "functional"
┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓
┃ Layer (type)        ┃ Output Shape      ┃    Param # ┃ Connected to      ┃
┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩
│ input2 (InputLayer) │ (None, 3000, 128, │          0 │ -                 │
│                     │ 1)                │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ input1 (InputLayer) │ (None, 3000, 128, │          0 │ -                 │
│                     │ 1)                │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d_2 (Conv2D)   │ (None, 300, 13,   │     25,664 │ input2[0][0]      │
│                     │ 64)               │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ input3 (InputLayer) │ (None, 3000, 256, │          0 │ -                 │
│                     │ 1)                │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ input4 (InputLayer) │ (None, 3000, 256, │          0 │ -                 │
│                     │ 1)                │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d (Conv2D)     │ (None, 300, 13,   │     25,664 │ input1[0][0]      │
│                     │ 64)               │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ max_pooling2d_1     │ (None, 150, 6,    │          0 │ conv2d_2[0][0]    │
│ (MaxPooling2D)      │ 64)               │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d_5 (Conv2D)   │ (None, 300, 26,   │     25,664 │ input3[0][0]      │
│                     │ 64)               │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d_7 (Conv2D)   │ (None, 300, 26,   │    102,464 │ input4[0][0]      │
│                     │ 64)               │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ max_pooling2d       │ (None, 150, 6,    │          0 │ conv2d[0][0]      │
│ (MaxPooling2D)      │ 64)               │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d_3 (Conv2D)   │ (None, 75, 3,     │    131,200 │ max_pooling2d_1[… │
│                     │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ max_pooling2d_2     │ (None, 150, 13,   │          0 │ conv2d_5[0][0]    │
│ (MaxPooling2D)      │ 64)               │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d_8 (Conv2D)   │ (None, 150, 13,   │    131,200 │ conv2d_7[0][0]    │
│                     │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d_1 (Conv2D)   │ (None, 150, 6,    │     32,896 │ max_pooling2d[0]… │
│                     │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d_4 (Conv2D)   │ (None, 75, 3,     │     65,664 │ conv2d_3[0][0]    │
│                     │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d_6 (Conv2D)   │ (None, 150, 13,   │     32,896 │ max_pooling2d_2[… │
│                     │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d_9 (Conv2D)   │ (None, 150, 13,   │     65,664 │ conv2d_8[0][0]    │
│                     │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ global_max_pooling… │ (None, 128)       │          0 │ conv2d_1[0][0]    │
│ (GlobalMaxPooling2… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ global_max_pooling… │ (None, 128)       │          0 │ conv2d_4[0][0]    │
│ (GlobalMaxPooling2… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ global_max_pooling… │ (None, 128)       │          0 │ conv2d_6[0][0]    │
│ (GlobalMaxPooling2… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ global_max_pooling… │ (None, 128)       │          0 │ conv2d_9[0][0]    │
│ (GlobalMaxPooling2… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ concatenate         │ (None, 512)       │          0 │ global_max_pooli… │
│ (Concatenate)       │                   │            │ global_max_pooli… │
│                     │                   │            │ global_max_pooli… │
│                     │                   │            │ global_max_pooli… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense (Dense)       │ (None, 128)       │     65,664 │ concatenate[0][0] │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dropout (Dropout)   │ (None, 128)       │          0 │ dense[0][0]       │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense_1 (Dense)     │ (None, 64)        │      8,256 │ dropout[0][0]     │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense_2 (Dense)     │ (None, 4)         │        260 │ dense_1[0][0]     │
└─────────────────────┴───────────────────┴────────────┴───────────────────┘
 Total params: 2,139,470 (8.16 MB)
 Trainable params: 713,156 (2.72 MB)
 Non-trainable params: 0 (0.00 B)
 Optimizer params: 1,426,314 (5.44 MB)

Model Configuration:
Optimizer: <keras.src.optimizers.adam.Adam object at 0x7effc93be9e0>
Loss Function: sparse_categorical_crossentropy
Learning Rate: <KerasVariable shape=(), dtype=float32, path=adam/learning_rate>

Train loss: 0.18281391263008118
Test val_loss: 0.46851804852485657
Train accuracy: 0.9224806427955627
Accuracy Score: 0.9418604651162791
F1 Score: 0.9429164504411001
Classification Report:
               precision    recall  f1-score   support

         0.0       1.00      1.00      1.00        17
         1.0       1.00      1.00      1.00        25
         2.0       0.88      0.91      0.89        23
         3.0       0.90      0.86      0.88        21

    accuracy                           0.94        86
   macro avg       0.94      0.94      0.94        86
weighted avg       0.94      0.94      0.94        86

Training History:
accuracy: [0.42248061299324036, 0.6666666865348816, 0.7364341020584106, 0.786821722984314, 0.748062014579773, 0.7790697813034058, 0.8604651093482971, 0.856589138507843, 0.8992248177528381, 0.9108527302742004, 0.8914728760719299, 0.8294573426246643, 0.8255813717842102, 0.9186046719551086, 0.9457364082336426, 0.8372092843055725, 0.8875969052314758, 0.9186046719551086, 0.9069767594337463, 0.930232584476471, 0.9186046719551086, 0.9186046719551086, 0.9263566136360168, 0.9031007885932922, 0.9379844665527344, 0.9534883499145508, 0.9728682041168213, 0.934108555316925, 0.9224806427955627]
loss: [1.2203619480133057, 0.8171238303184509, 0.6513772010803223, 0.5287754535675049, 0.5590466260910034, 0.49658286571502686, 0.3879658281803131, 0.3047465682029724, 0.2910097539424896, 0.21643872559070587, 0.2548123896121979, 0.48917248845100403, 0.3933136463165283, 0.21234725415706635, 0.1552765667438507, 0.469877153635025, 0.30202800035476685, 0.18428079783916473, 0.256720632314682, 0.24688182771205902, 0.1923823356628418, 0.18090888857841492, 0.17795148491859436, 0.22793379426002502, 0.17151053249835968, 0.12450317293405533, 0.09639082103967667, 0.17120768129825592, 0.18281391263008118]
val_accuracy: [0.6511628031730652, 0.6744186282157898, 0.8604651093482971, 0.6744186282157898, 0.6627907156944275, 0.7441860437393188, 0.8255813717842102, 0.9069767594337463, 0.8139534592628479, 0.8023256063461304, 0.7674418687820435, 0.7441860437393188, 0.8488371968269348, 0.8837209343910217, 0.8255813717842102, 0.8255813717842102, 0.8720930218696594, 0.8372092843055725, 0.8720930218696594, 0.8255813717842102, 0.9186046719551086, 0.8023256063461304, 0.8488371968269348, 0.8604651093482971, 0.9069767594337463, 0.895348846912384, 0.8720930218696594, 0.8837209343910217, 0.8488371968269348]
val_loss: [0.8759695291519165, 0.9901796579360962, 0.3889939486980438, 0.8069899082183838, 0.8128179311752319, 0.6159315705299377, 0.2924574315547943, 0.2742967903614044, 0.34489697217941284, 0.395681768655777, 0.7763181328773499, 0.5865566730499268, 0.3054066300392151, 0.2740243971347809, 0.4315151870250702, 0.3893338143825531, 0.33960556983947754, 0.4677673578262329, 0.27894142270088196, 0.5884861350059509, 0.2089792788028717, 0.5791420936584473, 0.5053191184997559, 0.4227553904056549, 0.23370108008384705, 0.22727034986019135, 0.2794855237007141, 0.3609083592891693, 0.46851804852485657]

################################################################################################ 

