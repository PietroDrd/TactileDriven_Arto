def build_MultiBranchModel(input_shape1, input_shape2, input_shape3, input_shape4, num_classes):
    # Branch 1
    input1 = Input(shape=input_shape1, name='input1')
    x1 = Conv2D(128, kernel_size=(20, 20), strides=(5,5), activation='relu', padding='same')(input1)
    x1 = MaxPooling2D(pool_size=(2, 2))(x1)
    x1 = Conv2D(128, kernel_size=(2, 2), activation='relu', padding='same')(x1)
    x1 = GlobalMaxPooling2D()(x1)
    
    # Branch 2
    input2 = Input(shape=input_shape2, name='input2')
    x2 = Conv2D(128, kernel_size=(10, 10), strides=(5,5), activation='relu', padding='same')(input2)
    x2 = MaxPooling2D(pool_size=(2, 2))(x2)
    x2 = Conv2D(128, kernel_size=(4, 4), strides=(2,2), activation='relu', padding='same')(x2)
    x2 = MaxPooling2D(pool_size=(2, 2))(x2)
    x2 = Conv2D(128, kernel_size=(2, 2), activation='relu', padding='same')(x2)
    x2 = GlobalMaxPooling2D()(x2)
    
    # Branch 3
    input3 = Input(shape=input_shape3, name='input3')
    x3 = Conv2D(128, kernel_size=(20, 20), strides=(5,5), activation='relu', padding='same')(input3)
    x3 = MaxPooling2D(pool_size=(2, 2))(x3)
    x3 = Conv2D(128, kernel_size=(2, 2), activation='relu', padding='same')(x3)
    x3 = GlobalMaxPooling2D()(x3)
    
    # Branch 4
    input4 = Input(shape=input_shape4, name='input4')
    x4 = Conv2D(128, kernel_size=(10, 10), strides=(5,5), activation='relu', padding='same')(input4)
    x4 = MaxPooling2D(pool_size=(2, 2))(x4)
    x4 = Conv2D(128, kernel_size=(4, 4), strides=(2,2), activation='relu', padding='same')(x4)
    x4 = Conv2D(128, kernel_size=(2, 2), activation='relu', padding='same')(x4)
    x4 = GlobalMaxPooling2D()(x4)
    
    # Concatenate branches
    merged = Concatenate()([x1, x2, x3, x4])
    
    # Dense layers for classification
    dense = Dense(128, activation='relu')(merged)
    dense = Dropout(0.1)(dense)
    dense = Dense(64, activation='relu')(dense)
    output = Dense(OUT_N, activation='softmax')(dense)
    
    # Create model
    model = Model(inputs=[input1, input2, input3, input4], outputs=output)
    
    return model

Model: "functional"
┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓
┃ Layer (type)        ┃ Output Shape      ┃    Param # ┃ Connected to      ┃
┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩
│ input2 (InputLayer) │ (None, 1800, 128, │          0 │ -                 │
│                     │ 1)                │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d_2 (Conv2D)   │ (None, 360, 26,   │     12,928 │ input2[0][0]      │
│                     │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ input4 (InputLayer) │ (None, 1800, 256, │          0 │ -                 │
│                     │ 1)                │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ input1 (InputLayer) │ (None, 1800, 128, │          0 │ -                 │
│                     │ 1)                │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ max_pooling2d_1     │ (None, 180, 13,   │          0 │ conv2d_2[0][0]    │
│ (MaxPooling2D)      │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ input3 (InputLayer) │ (None, 1800, 256, │          0 │ -                 │
│                     │ 1)                │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d_7 (Conv2D)   │ (None, 360, 52,   │     12,928 │ input4[0][0]      │
│                     │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d (Conv2D)     │ (None, 360, 26,   │     51,328 │ input1[0][0]      │
│                     │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d_3 (Conv2D)   │ (None, 90, 7,     │    262,272 │ max_pooling2d_1[… │
│                     │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d_5 (Conv2D)   │ (None, 360, 52,   │     51,328 │ input3[0][0]      │
│                     │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ max_pooling2d_4     │ (None, 180, 26,   │          0 │ conv2d_7[0][0]    │
│ (MaxPooling2D)      │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ max_pooling2d       │ (None, 180, 13,   │          0 │ conv2d[0][0]      │
│ (MaxPooling2D)      │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ max_pooling2d_2     │ (None, 45, 3,     │          0 │ conv2d_3[0][0]    │
│ (MaxPooling2D)      │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ max_pooling2d_3     │ (None, 180, 26,   │          0 │ conv2d_5[0][0]    │
│ (MaxPooling2D)      │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d_8 (Conv2D)   │ (None, 90, 13,    │    262,272 │ max_pooling2d_4[… │
│                     │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d_1 (Conv2D)   │ (None, 180, 13,   │     65,664 │ max_pooling2d[0]… │
│                     │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d_4 (Conv2D)   │ (None, 45, 3,     │     65,664 │ max_pooling2d_2[… │
│                     │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d_6 (Conv2D)   │ (None, 180, 26,   │     65,664 │ max_pooling2d_3[… │
│                     │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ conv2d_9 (Conv2D)   │ (None, 90, 13,    │     65,664 │ conv2d_8[0][0]    │
│                     │ 128)              │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ global_max_pooling… │ (None, 128)       │          0 │ conv2d_1[0][0]    │
│ (GlobalMaxPooling2… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ global_max_pooling… │ (None, 128)       │          0 │ conv2d_4[0][0]    │
│ (GlobalMaxPooling2… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ global_max_pooling… │ (None, 128)       │          0 │ conv2d_6[0][0]    │
│ (GlobalMaxPooling2… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ global_max_pooling… │ (None, 128)       │          0 │ conv2d_9[0][0]    │
│ (GlobalMaxPooling2… │                   │            │                   │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ concatenate         │ (None, 512)       │          0 │ global_max_pooli… │
│ (Concatenate)       │                   │            │ global_max_pooli… │
│                     │                   │            │ global_max_pooli… │
│                     │                   │            │ global_max_pooli… │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense (Dense)       │ (None, 128)       │     65,664 │ concatenate[0][0] │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dropout (Dropout)   │ (None, 128)       │          0 │ dense[0][0]       │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense_1 (Dense)     │ (None, 64)        │      8,256 │ dropout[0][0]     │
├─────────────────────┼───────────────────┼────────────┼───────────────────┤
│ dense_2 (Dense)     │ (None, 4)         │        260 │ dense_1[0][0]     │
└─────────────────────┴───────────────────┴────────────┴───────────────────┘
 Total params: 2,969,678 (11.33 MB)
 Trainable params: 989,892 (3.78 MB)
 Non-trainable params: 0 (0.00 B)
 Optimizer params: 1,979,786 (7.55 MB)

Model Configuration:
Optimizer: <keras.src.optimizers.adam.Adam object at 0x7f4af2857c40>
Loss Function: sparse_categorical_crossentropy
Learning Rate: <KerasVariable shape=(), dtype=float32, path=adam/learning_rate>

Train loss: 0.15651534497737885
Test val_loss: 0.38335007429122925
Train accuracy: 0.9283154010772705
Accuracy Score: 0.9032258064516129
F1 Score: 0.894879243563454
Classification Report:
               precision    recall  f1-score   support

         0.0       1.00      0.93      0.96        29
         1.0       0.91      0.91      0.91        22
         2.0       0.85      1.00      0.92        22
         3.0       0.83      0.75      0.79        20

    accuracy                           0.90        93
   macro avg       0.90      0.90      0.89        93
weighted avg       0.91      0.90      0.90        93

Training History:
accuracy: [0.41577062010765076, 0.5376344323158264, 0.6917562484741211, 0.6953405141830444, 0.7419354915618896, 0.8494623899459839, 0.8315412402153015, 0.7956989407539368, 0.8136200904846191, 0.842293918132782, 0.8602150678634644, 0.9068100452423096, 0.9426523447036743, 0.9569892287254333, 0.9032257795333862, 0.8530465960502625, 0.8637992739677429, 0.9283154010772705, 0.9569892287254333, 0.9534050226211548, 0.9426523447036743, 0.9318996667861938, 0.9247311949729919, 0.8064516186714172, 0.9283154010772705, 0.9283154010772705]
loss: [1.3495768308639526, 1.1595877408981323, 0.8531392812728882, 0.7679546475410461, 0.6339494585990906, 0.4347018301486969, 0.4451322853565216, 0.5105162262916565, 0.4530188739299774, 0.448167085647583, 0.32782065868377686, 0.2714138627052307, 0.18466408550739288, 0.12830065190792084, 0.21874062716960907, 0.4287993609905243, 0.39434513449668884, 0.1954319328069687, 0.1138446256518364, 0.12243570387363434, 0.17588718235492706, 0.18864387273788452, 0.201364204287529, 0.4977463483810425, 0.20798489451408386, 0.15651534497737885]
val_accuracy: [0.5376344323158264, 0.6559139490127563, 0.5806451439857483, 0.698924720287323, 0.774193525314331, 0.774193525314331, 0.7204301357269287, 0.8064516186714172, 0.8279569745063782, 0.8709677457809448, 0.8602150678634644, 0.8279569745063782, 0.8279569745063782, 0.9247311949729919, 0.7419354915618896, 0.7419354915618896, 0.8387096524238586, 0.8817204236984253, 0.8817204236984253, 0.8709677457809448, 0.9139785170555115, 0.8817204236984253, 0.6881720423698425, 0.8817204236984253, 0.8924731016159058, 0.8924731016159058]
val_loss: [1.2418268918991089, 0.7508784532546997, 1.0128871202468872, 0.661052405834198, 0.5551482439041138, 0.61298006772995, 0.5970103144645691, 0.5449742674827576, 0.4062759280204773, 0.4506286680698395, 0.36789029836654663, 0.3995682895183563, 0.46864980459213257, 0.3331083655357361, 0.8343328833580017, 0.8050609827041626, 0.4053751230239868, 0.31076133251190186, 0.357656866312027, 0.4078337252140045, 0.3302845358848572, 0.3696766793727875, 1.2827603816986084, 0.38282838463783264, 0.3672358989715576, 0.38335007429122925]

################################################################################################ 

